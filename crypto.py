from Crypto.Hash import MD5
from Crypto.PublicKey import RSA
from Crypto import Random

# See: https://www.dlitz.net/software/pycrypto/doc/#crypto-publickey-public-key-algorithms


DEFAULT_PRIVATE_KEY = (147864355146758540656493386925129392884810637635707857645915927753113702403070550628951336257776154559421272846244788010231007011321804297708375441859034898165344973305459964656672748781290799154831664905100945234959312258625653513736408152228762760448188641288248875476929659446709804287927223756938314962567,
                       65537,
                       72238902041425682511247162100321847221964188104736167143856694307020378161061887026225855384004103280338592153914058051353836496765209423745773607236257054650711735036736212355691202882639620187211700976096901645227017278449628804643826539062101306566081447107826606687956964438500965914394614870345426992257,
                       11931669607838901318199521750482597308245640482417246477562018991284833560146997680547045763443015151089127458338222981210998729280980143187843082009764193,
                       12392595504791232856303020997570367149844499657505954828622304958634553123944228187912181783334910041743581065622440136355924836110692015409679930755545319,
                       628941070071528102145137483267488581690558255305406295041016216027487916406667544349979858348771171155835612894358521812112706890674443547335278351722351)

DEFAULT_PUBLIC_KEY = (147864355146758540656493386925129392884810637635707857645915927753113702403070550628951336257776154559421272846244788010231007011321804297708375441859034898165344973305459964656672748781290799154831664905100945234959312258625653513736408152228762760448188641288248875476929659446709804287927223756938314962567,
                      65537)

def get_public_key():
    return RsaKey(DEFAULT_PUBLIC_KEY)

def sign(message):
    pass

def verify(signature):
    get_public_key().verify(signature.encode())
Rng = Random.new().read
RSAkey = RSA.generate(384, rng)   # This will take a while...
hash = MD5.new(plaintext).digest()
signature = RSAkey.sign(hash, rng)
signature   # Print what an RSA sig looks like--you don't really care.
('\021\317\313\336\264\315' ...,)
RSAkey.verify(hash, signature)     # This sig will check out
1
RSAkey.verify(hash[:-1], signature)# This sig will fail
0
